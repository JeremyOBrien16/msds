html_nodes("span")  %>%
html_nodes(xpath = '//*[@class="summary"]')  %>%
html_text() %>%
trimws -> summary.short
}
#create a structure to hold our full summaries
summary.full <- rep(NA, length(links))
#fill in the job data
job.city <- rep(city,length(links))
#add a place-holder for the salary
job.salary <- rep(0,length(links))
#iterate over the links that we collected
for ( n in 1:length(links) ){
#build the link
link <- paste(base.url,links[n],sep="")
#pull the link
page <- read_html(link)
#get the full summary
s.full <- page %>%
html_nodes("span")  %>%
html_nodes(xpath = '//*[@class="summary"]') %>%
html_text() %>%
trimws -> s.full
#check to make sure we got some data and if so, append it.
#as expired postings return an empty var
if (length(s.full) > 0 ){
summary.full[n] = s.full
}
}
#add the newly collected data to the jobs.data
jobs.data <- rbind(jobs.data,data.frame(city,
job.title,
company.name,
job.location,
summary.short,
job.salary,
links,
summary.full))
}
#create a df to hold everything that we collect
jobs.data <- data.frame(matrix(ncol = 7, nrow = 0))
n <- c("city","job.title","company.name","job.location","summary.short","salary","links,summary.full")
colnames(jobs.data)
for (city in city.set_small){
print(paste("Downloading data for: ", city))
for (start in range(0,max.results,10)){
url <- paste(base.url,"jobs?q=",target.job,"&l=",city,"&start=", start ,sep="")
page <- read_html(url)
Sys.sleep(1)
#recored the city search term << not working yet...
#i<-i+1
#job.city[i] <- city
#get the links
links <- page %>%
html_nodes("div") %>%
html_nodes(xpath = '//*[@data-tn-element="jobTitle"]') %>%
html_attr("href")
#get the job title
job.title <- page %>%
html_nodes("div") %>%
html_nodes(xpath = '//*[@data-tn-element="jobTitle"]') %>%
html_attr("title")
#get the job title
job.title <- page %>%
html_nodes("div") %>%
html_nodes(xpath = '//*[@data-tn-element="jobTitle"]') %>%
html_attr("title")
#get the company name
company.name <- page %>%
html_nodes("span")  %>%
html_nodes(xpath = '//*[@class="company"]')  %>%
html_text() %>%
trimws -> company.name
#get job location
job.location <- page %>%
html_nodes("span") %>%
html_nodes(xpath = '//*[@class="location"]')%>%
html_text() %>%
trimws -> job.location
#get the short sumary
summary.short <- page %>%
html_nodes("span")  %>%
html_nodes(xpath = '//*[@class="summary"]')  %>%
html_text() %>%
trimws -> summary.short
}
#create a structure to hold our full summaries
summary.full <- rep(NA, length(links))
#fill in the job data
job.city <- rep(city,length(links))
#add a place-holder for the salary
job.salary <- rep(0,length(links))
#iterate over the links that we collected
for ( n in 1:length(links) ){
#build the link
link <- paste(base.url,links[n],sep="")
#pull the link
page <- read_html(link)
#get the full summary
s.full <- page %>%
html_nodes("span")  %>%
html_nodes(xpath = '//*[@class="summary"]') %>%
html_text() %>%
trimws -> s.full
#check to make sure we got some data and if so, append it.
#as expired postings return an empty var
if (length(s.full) > 0 ){
summary.full[n] = s.full
}
}
#add the newly collected data to the jobs.data
jobs.data <- rbind(jobs.data,data.frame(city,
job.title,
company.name,
job.location,
summary.short,
job.salary,
links,
summary.full))
}
city.set_small <- c("New+York+NY", "Seattle+WA")
city.set <- c("New+York+NY", "Seattle+WA", "San+Francisco+CA",
"Washington+DC","Atlanta+GA","Boston+MA", "Austin+TX",
"Cincinnati+OH", "Pittsburgh+PA")
target.job <- "data+scientist"
base.url <- "https://www.indeed.com/"
max.results <- 50
#create a df to hold everything that we collect
jobs.data <- data.frame(matrix(ncol = 7, nrow = 0))
n <- c("city","job.title","company.name","job.location","summary.short","salary","links,summary.full")
colnames(jobs.data)
for (city in city.set_small){
print(paste("Downloading data for: ", city))
for (start in range(0,max.results,10)){
url <- paste(base.url,"jobs?q=",target.job,"&l=",city,"&start=", start ,sep="")
page <- read_html(url)
Sys.sleep(1)
#recorded the city search term << not working yet...
#i<-i+1
#job.city[i] <- city
#get the links
links <- page %>%
html_nodes("div") %>%
html_nodes(xpath = '//*[@data-tn-element="jobTitle"]') %>%
html_attr("href")
#get the job title
job.title <- page %>%
html_nodes("div") %>%
html_nodes(xpath = '//*[@data-tn-element="jobTitle"]') %>%
html_attr("title")
#get the job title
job.title <- page %>%
html_nodes("div") %>%
html_nodes(xpath = '//*[@data-tn-element="jobTitle"]') %>%
html_attr("title")
#get the company name
company.name <- page %>%
html_nodes("span")  %>%
html_nodes(xpath = '//*[@class="company"]')  %>%
html_text() %>%
trimws -> company.name
#get job location
job.location <- page %>%
html_nodes("span") %>%
html_nodes(xpath = '//*[@class="location"]')%>%
html_text() %>%
trimws -> job.location
#get the short sumary
summary.short <- page %>%
html_nodes("span")  %>%
html_nodes(xpath = '//*[@class="summary"]')  %>%
html_text() %>%
trimws -> summary.short
}
#create a structure to hold our full summaries
summary.full <- rep(NA, length(links))
#fill in the job data
job.city <- rep(city,length(links))
#add a place-holder for the salary
job.salary <- rep(0,length(links))
#iterate over the links that we collected
for ( n in 1:length(links) ){
#build the link
link <- paste(base.url,links[n],sep="")
#pull the link
page <- read_html(link)
#get the full summary
s.full <- page %>%
html_nodes("span")  %>%
html_nodes(xpath = '//*[@class="summary"]') %>%
html_text() %>%
trimws -> s.full
#check to make sure we got some data and if so, append it.
#as expired postings return an empty var
if (length(s.full) > 0 ){
summary.full[n] = s.full
}
}
#add the newly collected data to the jobs.data
jobs.data <- rbind(jobs.data,data.frame(city,
job.title,
company.name,
job.location,
summary.short,
job.salary,
links,
summary.full))
}
}
knitr::opts_chunk$set(echo = TRUE)
library(rvest)
library(RCurl)
library(dplyr)
library(stringr)
library(tidyr)
library(ggplot2)
library(tm)
library(wordcloud)
library(tidytext)
library(xtable)
library(readr)
library(plyr)
library(tidytext)
url <- "https://raw.githubusercontent.com/koffeeya/msds/master/DATA%20607%20Data%20Acquisition%20and%20Management/Projects/Project%2003/indeed_jobs_large.csv"
df <- read.csv(url, sep="|", stringsAsFactors = F)
df <- df[, -c(5,7)]
head(df)
sample <- df[sample(1:nrow(df), 100, replace=F),]
View(sample)
sample1 <- sample %>% separate(summary_full, c("bracket", "new_summary"), sep="^[\\[]", remove=T, convert=F) %>%
separate(new_summary, c("summary_full", "bracket"), sep="[\\]]$", remove=T, convert=F)
sample1 <- sample1[, -c(5, 8)]
View(sample1)
names(sample1) <- c("list_ID", "city", "job_title", "company_name", "link", "summary")
View(sample1)
# Separate City column into City and State by pattern of two uppercase letters after a plus sign (i.e., "+NY")
sample2 <- sample1 %>% separate(city, c("city", "state"), sep="[\\+][[:upper:]][[:upper:]]$", convert=T)
# Remove empty State column
sample2 <- sample2[, -c(3)]
# Replace plus signs with spaces
sample2$city <- str_replace_all(sample2$city, "[\\+]", " ")
View(sample2)
sample3 <- filter(sample2, sample2$summary!="")
View(sample3)
df1 <- df %>% separate(summary_full, c("bracket", "new_summary"), sep="^[\\[]", remove=T, convert=F) %>%
separate(new_summary, c("summary_full", "bracket"), sep="[\\]]$", remove=T, convert=F)
df1 <- df1[, -c(5, 8)]
View(df1)
names(df1) <- c("list_ID", "city", "job_title", "company_name", "link", "summary")
View(df1)
# Separate city column into city and state by pattern of two uppercase letters after a plus sign (i.e., "+NY")
df2 <- df1 %>% separate(city, c("city", "state"), sep="[\\+][[:upper:]][[:upper:]]$", convert=T)
# Remove empty State column
df2 <- df2[, -c(3)]
# Replace plus signs with spaces
df2$city <- str_replace_all(df2$city, "[\\+]", " ")
View(df2)
df_final <- filter(df2, df2$summary!="")
View(df_final)
library(rvest)
library(RCurl)
library(dplyr)
library(stringr)
library(tidyr)
library(ggplot2)
library(tm)
library(wordcloud)
library(tidytext)
library(xtable)
library(readr)
library(plyr)
library(tidytext)
library(knitr)
library(kableExtra)
?head
tfidf <- df_final
# Make all job titles lower case for later
tfidf$job_title <- tolower(df_final$job_title)
# Control list to be used for all corpuses
control_list <- list(removePunctuation = TRUE, stopwords = TRUE, tolower = TRUE,
weighting = weightTfIdf)
corpus.all <- VCorpus(VectorSource(df_final$summary))
tdm.all <- TermDocumentMatrix(corpus.all, control = control_list)
#tokenize the summary into individual words, drop stop words
df.sent <- df_final %>%
unnest_tokens(token, summary) %>%
anti_join(stop_words, by=c("token" = "word"))
head(df.sent,5)
#map the words to a sentiment score
df.sentiment <- df.sent %>%
inner_join(get_sentiments("afinn"),by=c("token" = "word")) #%>%
head(df.sentiment[c("city","job_title","company_name","token","score")],5)
knitr::opts_chunk$set(echo = TRUE)
library(DATA606)
setwd("C:/Users/Kavya/Desktop/Education/MS Data Science/DATA 606 Statistics and Probability/Labs")
startLab(Lab5)
startLab(Lab05)
startLab("Lab5")
load("more/nc.RData")
summary(nc)
by(nc$weight, nc$habit, mean)
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical",
order = c("smoker","nonsmoker"))
library(dplyr)
View(nc)
boxplot(nc$weight)
boxplot(nc$weight, nc$habit)
boxplot(nc$weight)
boxplot(nc$habit)
boxplot(nc$weight, nc$habit)
boxplot(nc$habit)
boxplot(nc$weight, nc$habit)
?boxplot
boxplot(c(nc$weight, nc$habit))
?boxplot
boxplot(list(nc$weight, nc$habit))
?boxplot
boxplot(list(nc$weight, nc$habit), names = c("weight", "habit"))
?boxplot
by(nc$weight, nc$habit, mean)
# The sample is random, so the observations are independent. The sample size is above 30. The sample does not appear to be strongly skewed in one direction.
length(nc)
# The sample is random, so the observations are independent. The sample size is above 30. The sample does not appear to be strongly skewed in one direction.
length(nc$weight)
# The sample is random, so the observations are independent. The sample size is above 30. The sample does not appear to be strongly skewed in one direction.
length(nc$weight)
length(nc$habit)
length(nc$weight)
length(nc$habit)
qplot(nc$weight)
length(nc$weight)
length(nc$habit)
plot(nc$weight)
length(nc$weight)
length(nc$habit)
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$weeks, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$weeks, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical", conflevel = 0.90)
young <- subset(nc, nc$weight=="younger mom")
mature <- subset(nc, nc$weight=="mature mom")
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical",
order = c("smoker","nonsmoker"))
young <- subset(nc, nc$weight=="younger mom")
mature <- subset(nc, nc$weight=="mature mom")
inference(y = young, x = mature, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical",
order = c("smoker","nonsmoker"))
young <- subset(nc, nc$weight=="younger mom")
mature <- subset(nc, nc$weight=="mature mom")
inference(y = young, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical",
order = c("smoker","nonsmoker"))
young <- subset(nc, nc$weight=="younger mom")
mature <- subset(nc, nc$weight=="mature mom")
summary(young)
summary(mature)
inference(y = young, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical",
order = c("smoker","nonsmoker"))
young <- subset(nc, nc$mature=="younger mom")
mature <- subset(nc, nc$mature=="mature mom")
summary(young)
summary(mature)
inference(y = young, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical",
order = c("smoker","nonsmoker"))
young <- subset(nc$mature, nc$mature=="younger mom")
mature <- subset(nc$mature, nc$mature=="mature mom")
summary(young)
summary(mature)
inference(y = young, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical",
order = c("smoker","nonsmoker"))
young <- subset(nc, nc$mature=="younger mom")
mature <- subset(nc, nc$mature=="mature mom")
summary(young)
summary(mature)
inference(y = young, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical",
order = c("smoker","nonsmoker"))
young <- subset(nc, nc$mature=="younger mom")
mature <- subset(nc, nc$mature=="mature mom")
summary(young)
summary(mature)
inference(y = young, x = mature, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical",
order = c("smoker","nonsmoker"))
young <- subset(nc, nc$mature=="younger mom")
mature <- subset(nc, nc$mature=="mature mom")
summary(young)
summary(mature)
inference(y = young$weight, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical",
order = c("smoker","nonsmoker"))
young <- subset(nc, nc$mature=="younger mom")
mature <- subset(nc, nc$mature=="mature mom")
summary(young)
summary(mature)
inference(y = young$weight, x = mature$weight, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical",
order = c("smoker","nonsmoker"))
young <- subset(nc, nc$mature=="younger mom")
mature <- subset(nc, nc$mature=="mature mom")
summary(young)
summary(mature)
inference(y = young$weight, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical",
order = c("smoker","nonsmoker"))
young <- subset(nc, nc$mature=="younger mom")
mature <- subset(nc, nc$mature=="mature mom")
summary(young)
summary(mature)
inference(y = young$weight, x = mature$weight, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical",
order = c("smoker","nonsmoker"))
young <- subset(nc, nc$mature=="younger mom")
mature <- subset(nc, nc$mature=="mature mom")
summary(young)
summary(mature)
inference(y = young$gained, x = mature$gained, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical",
order = c("smoker","nonsmoker"))
young <- subset(nc, nc$mature=="younger mom")
mature <- subset(nc, nc$mature=="mature mom")
summary(young)
summary(mature)
inference(y = young$gained, x = mature$gained, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
young <- subset(nc, nc$mature=="younger mom")
mature <- subset(nc, nc$mature=="mature mom")
summary(young)
summary(mature)
inference(y = young$gained, x = mature$gained, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical", alternative = 'greater')
young <- subset(nc, nc$mature=="younger mom")
mature <- subset(nc, nc$mature=="mature mom")
summary(young)
summary(mature)
inference(y = young$gained, x = mature$gained, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
young <- subset(nc, nc$mature=="younger mom")
mature <- subset(nc, nc$mature=="mature mom")
summary(young)
summary(mature)
inference(y = nc$mature, x = nc$gained, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
young <- subset(nc, nc$mature=="younger mom")
mature <- subset(nc, nc$mature=="mature mom")
summary(young)
summary(mature)
inference(y = nc$gained, x = nc$mature, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
young <- subset(nc, nc$mature=="younger mom")
mature <- subset(nc, nc$mature=="mature mom")
max(young)
young <- subset(nc, nc$mature=="younger mom")
mature <- subset(nc, nc$mature=="mature mom")
max(young$fage)
min(mature$fage)
young <- subset(nc, nc$mature=="younger mom")
mature <- subset(nc, nc$mature=="mature mom")
summary(young$fage)
summary(mature$fage)
young <- subset(nc, nc$mature=="younger mom")
mature <- subset(nc, nc$mature=="mature mom")
summary(as.numeric(young$fage))
summary(as.numeric(mature$fage))
young <- subset(nc, nc$mature=="younger mom")
mature <- subset(nc, nc$mature=="mature mom")
View(young)
View(mature)
summary(as.numeric(young$fage))
summary(as.numeric(mature$fage))
young <- subset(nc, nc$mature=="younger mom")
mature <- subset(nc, nc$mature=="mature mom")
View(young)
View(mature)
summary(as.numeric(young$fage))
summary(as.numeric(mature$fage))
young <- subset(nc, nc$mature=="younger mom")
mature <- subset(nc, nc$mature=="mature mom")
summary(as.numeric(young$fage))
summary(as.numeric(mature$fage))
inference(y = nc$weight, x = nc$weight, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x = nc$whitemom, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$gender, x = nc$whitemom, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$visits, x = nc$whitemom, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$fage, x = nc$whitemom, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$fage, x = nc$whitemom, est = "mean", type = "ht", null = 0,
alternative = "onesided", method = "theoretical")
inference(y = nc$fage, x = nc$whitemom, est = "mean", type = "ht", null = 0,
alternative = "less", method = "theoretical")
knitr::opts_chunk$set(echo = TRUE)
library(DATA606)
library(ggplot2)
t.test(35)
?t.test
qt(0.05, 36)
?qt
qt(0.05, 36)
